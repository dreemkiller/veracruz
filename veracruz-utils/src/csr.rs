//! Certificate Singing Request generation
//!
//! ## Authors
//!
//! The Veracruz Development Team.
//!
//! ## Licensing and copyright notice
//!
//! See the `LICENSE.markdown` file in the Veracruz root directory for
//! information on licensing and copyright.

use std::{
    string::String,
    vec::Vec,
};

use ring::{rand::SystemRandom, signature::EcdsaKeyPair};
use ring::signature::KeyPair;

const CSR_TEMPLATE: [u8; 302] = [
    0x30, 0x82, 0x01, 0x2a, 0x30, 0x81, 0xd1, 0x02, 0x01, 0x00, 0x30, 0x6f, 0x31, 0x0b, 0x30, 0x09,
    0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55,
    0x04, 0x08, 0x0c, 0x05, 0x54, 0x65, 0x78, 0x61, 0x73, 0x31, 0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55,
    0x04, 0x07, 0x0c, 0x06, 0x41, 0x75, 0x73, 0x74, 0x69, 0x6e, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03,
    0x55, 0x04, 0x0a, 0x0c, 0x08, 0x56, 0x65, 0x72, 0x61, 0x63, 0x72, 0x75, 0x7a, 0x31, 0x15, 0x30,
    0x13, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x20, 0x45, 0x6e, 0x63,
    0x6c, 0x61, 0x76, 0x65, 0x31, 0x15, 0x30, 0x13, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0c, 0x56,
    0x65, 0x72, 0x61, 0x63, 0x72, 0x75, 0x7a, 0x52, 0x6f, 0x6f, 0x74, 0x30, 0x59, 0x30, 0x13, 0x06,
    0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03,
    0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x38, 0x49, 0x8a, 0xf8, 0x85, 0x93, 0x87, 0x2c, 0x69, 0x56,
    0x3d, 0x66, 0x72, 0xdf, 0x08, 0x5f, 0xe9, 0x93, 0x8d, 0x9c, 0xad, 0xd9, 0x9e, 0x91, 0x52, 0xc8,
    0x50, 0x06, 0x97, 0x5f, 0x0b, 0x4b, 0x48, 0x18, 0x7a, 0x4f, 0x0b, 0x21, 0xe5, 0x46, 0x65, 0x9b,
    0x26, 0x37, 0x41, 0x03, 0x9b, 0x5a, 0x45, 0xaa, 0xc1, 0x2c, 0xf9, 0x4f, 0xa5, 0xc7, 0x35, 0xc8,
    0xe8, 0x7d, 0xdd, 0x3c, 0xc7, 0x89, 0xa0, 0x00, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
    0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xb5, 0x3d, 0xe3, 0x6c,
    0xcb, 0xe5, 0x2d, 0xea, 0x9b, 0x53, 0x69, 0x83, 0x51, 0x2f, 0xf8, 0x08, 0x90, 0x5a, 0x51, 0x8c,
    0xd0, 0xfa, 0x26, 0xe3, 0xdd, 0xed, 0x39, 0x16, 0x6e, 0x88, 0x79, 0x7c, 0x02, 0x20, 0x10, 0x9d,
    0x0a, 0x22, 0xcf, 0x73, 0x15, 0x59, 0x9b, 0xf4, 0x38, 0xeb, 0x10, 0x81, 0xa6, 0xe4, 0xe5, 0xbb,
    0x45, 0x2c, 0xf9, 0xd9, 0x9e, 0x30, 0xf9, 0x5c, 0x01, 0x9e, 0x7e, 0x90, 0x4e, 0xf5,
];

const PUBLIC_KEY_LOCATION: (usize, usize) = (149, 214);
const SIGNATURE_LOCATION: (usize, usize) = (231, 302);
const SIGNATURE_RANGE: (usize, usize) = (4, 216);

pub fn generate_csr(private_key: &EcdsaKeyPair) -> Result<Vec<u8>, String> {
    let public_key = private_key.public_key().as_ref().clone();
    println!("veracruz_utils::csr::generate_csr using public key:{:x?}", public_key);
    let mut constructed_csr = CSR_TEMPLATE.to_vec();
    if public_key.len() != (PUBLIC_KEY_LOCATION.1 - PUBLIC_KEY_LOCATION.0) {
        return Err(format!("veracruz_utils::csr::generate_csr Invalid length: public_key, wanted:{:?}, got:{:?}", PUBLIC_KEY_LOCATION.1 - PUBLIC_KEY_LOCATION.0, public_key.len()));
    }
    constructed_csr.splice(
        PUBLIC_KEY_LOCATION.0..PUBLIC_KEY_LOCATION.1,
        public_key.iter().cloned(),
    );

    let rng = SystemRandom::new();
    println!("veracruz_utils::csr::generate_csr generating signature across:{:02x?}", &constructed_csr[SIGNATURE_RANGE.0..SIGNATURE_RANGE.1]);
    let signature: Vec<u8> = private_key.sign(&rng, &constructed_csr[SIGNATURE_RANGE.0..SIGNATURE_RANGE.1]).unwrap().as_ref().to_vec();

    println!("veracruz_utils::csr::generate_csr signature:{:02x?}", signature);

    if signature.len() != (SIGNATURE_LOCATION.1 - SIGNATURE_LOCATION.0) {
        return Err(format!("veracruz_utils::csr::generate_csr Invalid length: signature, wanted:{:?}, got{:?}", SIGNATURE_LOCATION.1 - SIGNATURE_LOCATION.0, signature.len()));
    }
    constructed_csr.splice(
            SIGNATURE_LOCATION.0..SIGNATURE_LOCATION.1,
            signature,
    );

    if constructed_csr.len() != CSR_TEMPLATE.len() {
        return Err(format!("veracruz_utils::csr::generate_csr Invalid length: constructed_csr: wanted: {:?}, got:{:?}",
            CSR_TEMPLATE.len(),
            constructed_csr.len()
        ));
    } else {
        println!("veracruz_utils::generate_csr generated csr:{:02x?}", constructed_csr);
        Ok(constructed_csr.clone())
    }
}